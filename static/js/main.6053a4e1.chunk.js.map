{"version":3,"sources":["components/ToDoItem.module.css","components/AddToDo.js","components/ToDoItem.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AddToDo","props","state","title","onChange","e","setState","target","name","value","onSubmit","preventDefault","addToDo","opened","toggleBox","bind","this","className","onClick","type","placeholder","required","Component","ToDoItem","getStyle","todo","completed","textDecoration","color","id","classes","Trash","removeToDo","style","toggleClass","ToDoList","todoitems","map","key","App","uuid","filter","newToDo","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6053a4e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Trash\":\"ToDoItem_Trash__2uomJ\"};","import React, { Component } from 'react'\n\nexport class AddToDo extends Component {\n\n    state = {\n        title: \"\"\n    }\n\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value });\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.addToDo(this.state.title);\n        this.setState({ title: \"\" });\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            opened: false,\n        };\n        this.toggleBox = this.toggleBox.bind(this);\n    }\n\n    toggleBox() {\n        const { opened } = this.state;\n        this.setState({\n            opened: !opened,\n        });\n    }\n\n    render() {\n        const { opened } = this.state;\n        if (opened) {\n            return (\n                <div>\n                    <h1>To Do List <i className=\"fa fa-plus-square\" onClick={this.toggleBox}></i></h1>\n                    <form onSubmit={this.onSubmit}>\n                        <input type=\"text\" name=\"title\" value={this.state.title} onChange={this.onChange} placeholder=\"Add TO-DO here\" required />\n                    </form>\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <h1>To Do List <i className=\"fa fa-plus-square\" onClick={this.toggleBox}></i></h1>\n                </div>\n            )\n        }\n    }\n}\n\nexport default AddToDo;\n","import React, { Component } from 'react'\nimport PropTypes from \"prop-types\";\nimport classes from './ToDoItem.module.css';\n\n\nexport class ToDoItem extends Component {\n    getStyle = () => {\n        if (this.props.todo.completed) {\n            return {\n                textDecoration: \"line-through\",\n                color: \"LightSeaGreen\"\n            }\n        }\n        else {\n            return {\n                textDecoration: \"none\"\n            }\n        }\n    }\n\n    render() {\n        const { id, title } = this.props.todo;\n        return (\n            <li>\n                <span className={classes.Trash} onClick={this.props.removeToDo.bind(this, id)}>\n                    <i className=\"fa fa-trash\"></i>\n                </span>\n                <span style={this.getStyle()} onClick={this.props.toggleClass.bind(this, id)}>{title}</span>\n            </li>\n        )\n    }\n}\n\nToDoItem.propTypes = {\n    todo: PropTypes.object.isRequired\n}\n\nexport default ToDoItem;\n","import React, { Component } from 'react';\nimport ToDoItem from \"./ToDoItem\";\nimport PropTypes from \"prop-types\";\n\nclass ToDoList extends Component {\n\n    render() {\n        return this.props.todoitems.map((todo) => (\n            <ul>\n                <ToDoItem\n                    key={todo.id}\n                    todo={todo}\n                    toggleClass={this.props.toggleClass}\n                    removeToDo={this.props.removeToDo}\n                />\n            </ul>\n        ))\n    }\n};\n\nToDoList.propTypes = {\n    todoitems: PropTypes.array.isRequired\n}\n\nexport default ToDoList;\n","import React, { Component } from 'react';\nimport './App.css';\nimport '../node_modules/font-awesome/css/font-awesome.min.css';\nimport AddToDo from \"./components/AddToDo\";\nimport ToDoList from \"./components/ToDoList\";\nimport { v4 as uuid } from 'uuid';\n\n\nclass App extends React.Component {\n\n  state = {\n    todoitems: [\n      {\n        id: uuid(),\n        title: \"CSS lernen\",\n        completed: true\n      },\n      {\n        id: uuid(),\n        title: \"Brief schreiben\",\n        completed: false\n      },\n      {\n        id: uuid(),\n        title: \"Obst kaufen\",\n        completed: false\n      },\n      {\n        id: uuid(),\n        title: \"App erstellen\",\n        completed: false\n      },\n      {\n        id: uuid(),\n        title: \"Staubsaugen\",\n        completed: false\n      }\n    ]\n\n  };\n\n  //Remove To-Do Item\n  removeToDo = (id) => {\n    this.setState({\n      todoitems: [...this.state.todoitems.filter(todo =>\n        todo.id !== id)]\n    });\n  }\n\n  //Make the item lined-through when completed \n  toggleClass = (id) => {\n    this.setState({\n      todoitems: this.state.todoitems.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    });\n  }\n\n  //Add To-Do Item\n  addToDo = (title) => {\n    const newToDo = {\n      id: uuid(),\n      title: title,\n      completed: false\n    }\n    this.setState({\n      todoitems: [...this.state.todoitems, newToDo]\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AddToDo addToDo={this.addToDo} />\n        <ToDoList todoitems={this.state.todoitems} toggleClass={this.toggleClass} removeToDo={this.removeToDo} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}